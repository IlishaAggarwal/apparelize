import { GraphQLClient, gql } from 'graphql-request';
import { Headers } from 'cross-fetch';
import FormData from 'form-data';
import * as fs from 'fs';
import { promises as fsp } from 'fs';
import axios from 'axios';
global.Headers = global.Headers || Headers;




export async function getOrdersData() {
  const endpoint = 'https://zatca.myshopify.com/admin/api/2023-07/graphql.json';

  const graphQLClient = new GraphQLClient(endpoint, {
    headers: {
      'Content-Type': 'application/json',
      'X-Shopify-Access-Token': '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',
    },
  });



// await fsp.writeFile("data.json", JSON.stringify(data));

  const file = await fsp.readFile("17987_order_refund.jpg"); // This can be named whatever you'd like. You'll end up specifying the name when you upload the file to a staged target.
const fileSize = fs.statSync("17987_order_refund.jpg").size; // Important to get the file size for future steps.

  const query = gql`
    query {
      orders(first: 10) {
        edges {
          node {
            id
            metafields(first: 10) {
              edges {
                node {
                  namespace
                  key
                  value
                }
              }
            }
          }
        }
      }
    }
  `;

  const STAGED_UPLOADS_CREATE = gql`
  mutation stagedUploadsCreate($input: [StagedUploadInput!]!) {
    stagedUploadsCreate(input: $input) {
      stagedTargets {
        resourceUrl
        url
        parameters {
          name
          value
        }
      }
      userErrors {
        field
        message
      }
    }
  }
`;

  const stagedVariable = {
    "input": [
      {
        "filename": "17984_order_refund.jpg",
        "mimeType": "image/jpg",
        "httpMethod": "POST",
        "resource": "FILE"
      },
    ]
  }



  const fileCreate = gql`
mutation fileCreate($files: [FileCreateInput!]!) {
  fileCreate(files: $files) {
    files {
      alt
      createdAt
      id
    }
    userErrors {
        field
        message
      }
  }
}
`


  try {
    const stagedUploadsQueryResult = await graphQLClient.request(STAGED_UPLOADS_CREATE, stagedVariable);


    const target =
      stagedUploadsQueryResult.stagedUploadsCreate.stagedTargets[0];
    const params = target.parameters; // Parameters contain all the sensitive info we'll need to interact with the aws bucket.
    const url = target.url; // This is the url you'll use to post data to aws or google. It's a generic s3 url that when combined with the params sends your data to the right place.
    const resourceUrl = target.resourceUrl; // This is the specific url that will contain your image data after you've uploaded the file to the aws staged target.

    // Generate a form, add the necessary params and append the file.
    // Must use the FormData library to create form data via the server.
    const form = new FormData();

    // Add each of the params we received from Shopify to the form. this will ensure our ajax request has the proper permissions and s3 location data.
    params.forEach(({ name, value }) => {
      form.append(name, value);
    });

    // Add the file to the form.
    form.append("file", file);

    // Headers
    const headers = {
      ...form.getHeaders(), // Pass the headers generated by FormData library. It'll contain content-type: multipart/form-data. It's necessary to specify this when posting to aws.
    };
    if (url.includes("amazon")) {
      // Need to include the content length for Amazon uploads. If uploading to googleapis then the content-length header will break it.
      headers["Content-Length"] = fileSize + 5000; // AWS requires content length to be included in the headers. This may not be automatically passed so you'll need to specify. And ... add 5000 to ensure the upload works. Or else there will be an error saying the data isn't formatted properly.
    }
    await axios.post(url, form, {
      headers
    });


    const createFileVariables = {
      files: {
        alt: "QR Image",
        contentType: "IMAGE",
        originalSource: resourceUrl, // Pass the resource url we generated above as the original source. Shopify will do the work of parsing that url and adding it to files.
      },
    };

    const fileCreateData = await graphQLClient.request(fileCreate, createFileVariables);
    console.log(JSON.stringify(fileCreateData))
    
    return ;

  } catch (error) {
    console.error(error);
    throw error;
  }

}
getOrdersData();